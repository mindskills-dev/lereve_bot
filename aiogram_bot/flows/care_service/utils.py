from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile
from asgiref.sync import sync_to_async
from django.db.models import Prefetch

from aiogram_bot import main
from aiogram_bot.flows.care_service.keyboards import get_all_active_products_care_keyboard
from aiogram_bot.flows.care_service.texts import user_written_to_care_service_text, \
    manager_notified_text, user_to_care_product_text
from aiogram_bot.flows.main_menu.keyboards import back_to_main_menu_keyboard, start_keyboard
from aiogram_bot.flows.main_menu.utils import get_welcome_photo
from aiogram_bot.keyboards import generate_keyboard
from aiogram_bot.utils import send_callback_aiogram_message, send_message_aiogram_message
from apps.care_requests.models import CareRequest, CareRequestDetail
from apps.clients.models import Client
from apps.shops.models import Product
from core.settings import TELEGRAM_CARE_SERVICE_ID, \
    TELEGRAM_CARE_SERVICE_USERNAME
from django.db import transaction

from aiogram_bot.bot import bot


async def get_file_url(file_id: str) -> str:
    file = await bot.get_file(file_id)
    return f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"


class SupportState(StatesGroup):
    select_product = State()
    describe_issue = State()
    confirm_request = State()


async def show_care_service(callback, state):
    await callback.answer()
    await state.clear()

    care_service_id = TELEGRAM_CARE_SERVICE_ID  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π chat_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    care_service_username = TELEGRAM_CARE_SERVICE_USERNAME  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π chat_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    text = user_written_to_care_service_text.format(callback.from_user.username, callback.from_user.id)
    # await main.bot.send_message(care_service_id, text)

    text = manager_notified_text.format(care_service_username)

    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∏ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã."

    keyboard = await get_all_active_products_care_keyboard()
    await send_callback_aiogram_message(
        callback=callback,
        text=text,
        keyboard=keyboard
    )


async def send_message_to_care_service(callback, state, product_id):
    await callback.answer()
    product = await Product.objects.aget(id=product_id)
    care_service_id = TELEGRAM_CARE_SERVICE_ID  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π chat_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    care_service_username = TELEGRAM_CARE_SERVICE_USERNAME  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π chat_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    text = user_to_care_product_text.format(
        callback.from_user.username, callback.from_user.id, product.title, product.article, product.url
    )
    # await state.set_state(SupportState.select_product)
    await state.update_data(product_id=product_id)
    await state.set_state(SupportState.describe_issue)

    text = '–í—ã –ø–æ–∫—É–ø–∞–ª–∏ —É –Ω–∞—Å –ø—Ä–æ–¥—É–∫—Ç: <b>{}</b>. \n–û–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º, –≤–º–µ—Å—Ç–µ —Å  <b>–æ–ø–∏—Å–∞–Ω–∏–µ–º</b>, –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å <b> —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b>'. \
        format(product.title)

    button_data = [
        ('–û—Ç–º–µ–Ω–∞', 'care_service')
    ]
    await send_callback_aiogram_message(
        callback=callback,
        text=text,
        keyboard=generate_keyboard(button_data, [1])

    )

    await main.bot.send_message(care_service_id, text)
    # text = manager_notified_text.format(care_service_username)
    # await send_callback_aiogram_message(
    #     callback=callback,
    #     text=text,
    #     keyboard=back_to_main_menu_keyboard()
    # )


@sync_to_async
def create_client_request(data):
    print('data sfs ', data)
    care_request_id = data['care_request_id']
    with transaction.atomic():
        client = Client.objects.get(user_id=data['client_id'])
        if not care_request_id:
            care_request = CareRequest.objects.create(
                client=client,
                product_id=data['product_id'],
            )
        else:
            care_request = CareRequest.objects.get(id=care_request_id)

        CareRequestDetail.objects.create(
            care_request=care_request,
            media_type=data['media_type'],
            file_id=data['file_id'],
            file_url=data['file_url'],
            text=data['text'],
        )
    return care_request.id


async def get_client_request(message, state):
    data = await state.get_data()
    product_id = data["product_id"]
    care_request_id = data.get("care_request_id")
    client_id = message.from_user.id
    text = None
    media_type = None
    file_id = None
    file_url = None
    if message.text:
        media_type = "text"
        text = message.text
    elif message.photo:
        media_type = "photo"
        file_id = message.photo[-1].file_id
        file_url = await get_file_url(file_id)
    elif message.video:
        media_type = "video"
        file_id = message.video.file_id
        file_url = await get_file_url(file_id)
    elif message.audio:
        media_type = "audio"
        file_id = message.audio.file_id
        file_url = await get_file_url(file_id)
    elif message.voice:
        media_type = "voice"
        file_id = message.voice.file_id
        file_url = await get_file_url(file_id)

    request_data = {
        'client_id': client_id,
        'product_id': product_id,
        'media_type': media_type,
        'file_id': file_id,
        'file_url': file_url,
        'text': text,
        'care_request_id': care_request_id,

    }
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    care_request_id = await create_client_request(request_data)
    await state.update_data(care_request_id=care_request_id)

    data = await state.get_data()
    messages = data.get("messages", [])
    messages.append(message.message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    await state.update_data(messages=messages)

    await state.update_data(care_request_id=care_request_id)

    keyboard = generate_keyboard(
        [
            ('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 'finish_request')
        ], [1]
    )
    text = "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ <b> —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ </b> –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –∏–ª–∏ –Ω–∞–∂–∞—Ç—å <b>–∫–Ω–æ–ø–∫—É: –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å</b>."
    await send_message_aiogram_message(message=message,
                                       text=text,
                                       keyboard=keyboard)


@sync_to_async
def generate_admin_message(callback, care_request_id):
    care_request = CareRequest.objects.prefetch_related(
        Prefetch("details")
    ).get(id=care_request_id)

    admin_message = f"üì© **–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É**\n\n"
    admin_message += f"üë§ –ö–ª–∏–µ–Ω—Ç: {callback.from_user.full_name} (ID: {callback.from_user.id})\n"
    admin_message += f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: {care_request.product}\n"
    admin_message += f"üïí –°–æ–∑–¥–∞–Ω: {care_request.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n\n"

    details = care_request.details.all()
    if details.exists():
        admin_message += "\nüìé –í–ª–æ–∂–µ–Ω–∏—è:\n"
        for detail in details:
            admin_message += f"- **–¢–∏–ø**: {detail.media_type}\n"
            if detail.file_url:
                admin_message += f"  [–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª]({detail.file_url})\n"
            if detail.text:
                admin_message += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {detail.text}\n"
            admin_message += "\n"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

    return admin_message


async def finish_request(callback, state):
    data = await state.get_data()
    care_request_id = data.get('care_request_id')
    print('care_request ', care_request_id)

    # admin_message = await generate_admin_message(callback, care_request_id)
    # await bot.send_message(
    #     TELEGRAM_CARE_SERVICE_ID,
    #     admin_message,
    #     parse_mode="Markdown",
    #     disable_web_page_preview=True,
    # )

    client_id = callback.from_user.id
    messages_to_forward = data.get("messages", [])

    if not messages_to_forward:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await send_callback_aiogram_message(
            callback=callback,
            text='–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
            keyboard=back_to_main_menu_keyboard()
        )

        # await callback.reply("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    await callback.message.reply_photo(
        photo=FSInputFile("staticfiles/notified_manager_photo.jpeg"),
        caption='–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω <b>–º–µ–Ω–µ–¥–∂–µ—Ä—É</b>. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω <b>—Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏</b>',
        reply_markup=start_keyboard()
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        await bot.send_message(
            TELEGRAM_CARE_SERVICE_ID,
            f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ <b>{callback.from_user.full_name}</b> (ID: {client_id}). –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É:",
        )

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
        for msg_id in messages_to_forward:
            await bot.forward_message(
                chat_id=TELEGRAM_CARE_SERVICE_ID,
                from_chat_id=client_id,
                message_id=msg_id,
            )

        await bot.send_message(
            TELEGRAM_CARE_SERVICE_ID,
            f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ <b>{callback.from_user.full_name}</b> (ID: {client_id}). –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É:",
        )



        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # await send_callback_aiogram_message(
        #     callback=callback,
        #     text='–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω <b>–º–µ–Ω–µ–¥–∂–µ—Ä—É</b>. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω <b>—Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏</b>',
        #     keyboard=back_to_main_menu_keyboard()
        # )

        await state.clear()

    except Exception as e:
        await send_callback_aiogram_message(
            callback=callback,
            text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
            keyboard=back_to_main_menu_keyboard()
        )
        await state.clear()
        raise e
